//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/qa_wall_logger_client/RemoteLogger.java
//

#include "J2ObjC_source.h"
#include "com/qa_wall_logger_client/RemoteLogger.h"
#include "com/qa_wall_logger_client/log/Log.h"
#include "java/util/List.h"

@interface QA_Wall_RemoteLogger () {
 @public
  id<QA_Wall_RemoteLogger_Listener> listener_;
}
@end

J2OBJC_FIELD_SETTER(QA_Wall_RemoteLogger, listener_, id<QA_Wall_RemoteLogger_Listener>)

@implementation QA_Wall_RemoteLogger

- (instancetype)initWithQA_Wall_RemoteLogger_Listener:(id<QA_Wall_RemoteLogger_Listener>)listener {
  if (self = [super init]) {
    self->listener_ = listener;
  }
  return self;
}

- (void)sendWithQA_Wall_Log:(id<QA_Wall_Log>)log {
  NSString *url = [((id<QA_Wall_RemoteLogger_Listener>) nil_chk(listener_)) onGetServerUrl];
  for (NSString * __strong path in nil_chk([((id<QA_Wall_Log>) nil_chk(log)) getUrlPaths])) {
    url = JreStrcat("$$", url, JreStrcat("C$", '/', path));
  }
  NSString *parsedLog = [listener_ onParseToJsonWithQA_Wall_Log:log];
  [listener_ onSentToNetworkWithNSString:url withNSString:parsedLog];
}

- (void)copyAllFieldsTo:(QA_Wall_RemoteLogger *)other {
  [super copyAllFieldsTo:other];
  other->listener_ = listener_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(QA_Wall_RemoteLogger)

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(QA_Wall_RemoteLogger_Listener)
